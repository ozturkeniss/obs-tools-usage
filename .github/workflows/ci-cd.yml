name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Test and Build Job
  test-and-build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [product-service, basket-service, payment-service, fiberv2-gateway]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.22'
        cache: true
    
    - name: Install dependencies
      run: |
        go mod download
        go mod verify
    
    - name: Run tests
      run: |
        go test -v -race -coverprofile=coverage.out ./...
        go tool cover -html=coverage.out -o coverage.html
    
    - name: Run linting
      uses: golangci/golangci-lint-action@v3
      with:
        version: latest
        args: --timeout=5m
    
    - name: Run security scan
      uses: securecodewarrior/github-action-add-sarif@v1
      with:
        sarif-file: 'security-scan-results.sarif'
    
    - name: Build Go binary
      run: |
        CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -o bin/${{ matrix.service }} ./cmd/${{ matrix.service }}
    
    - name: Build Docker image
      run: |
        docker build -f dockerfiles/${{ matrix.service }}.dockerfile -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.service }}:${{ github.sha }} .
        docker build -f dockerfiles/${{ matrix.service }}.dockerfile -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.service }}:latest .
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.out
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  # Security Scan Job
  security-scan:
    runs-on: ubuntu-latest
    needs: test-and-build
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  # Infrastructure Tests
  infrastructure-test:
    runs-on: ubuntu-latest
    needs: test-and-build
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: '1.6.0'
    
    - name: Terraform Format Check
      run: terraform fmt -check -recursive
    
    - name: Terraform Init
      run: terraform init
    
    - name: Terraform Validate
      run: terraform validate
    
    - name: Terraform Plan
      run: terraform plan -out=tfplan
    
    - name: Run Ansible Lint
      uses: ansible/ansible-lint-action@main
      with:
        targets: 'ansible/'
    
    - name: Run Ansible Playbook Check
      run: |
        ansible-playbook --syntax-check ansible/main.yml
        ansible-playbook --syntax-check ansible/k8s-setup.yml
        ansible-playbook --syntax-check ansible/app-deploy.yml

  # Deploy to Development
  deploy-dev:
    runs-on: ubuntu-latest
    needs: [test-and-build, security-scan, infrastructure-test]
    if: github.ref == 'refs/heads/develop'
    environment: development
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-west-2
    
    - name: Login to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Build and push Docker images
      run: |
        docker build -f dockerfiles/product.dockerfile -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/product-service:dev-${{ github.sha }} .
        docker build -f dockerfiles/basket.dockerfile -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/basket-service:dev-${{ github.sha }} .
        docker build -f dockerfiles/payment.dockerfile -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/payment-service:dev-${{ github.sha }} .
        docker build -f dockerfiles/gateway.dockerfile -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/gateway:dev-${{ github.sha }} .
        
        docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/product-service:dev-${{ github.sha }}
        docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/basket-service:dev-${{ github.sha }}
        docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/payment-service:dev-${{ github.sha }}
        docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/gateway:dev-${{ github.sha }}
    
    - name: Deploy to Development
      run: |
        # Terraform apply for dev environment
        cd terraform
        terraform init
        terraform plan -var-file="terraform.tfvars.dev" -out=tfplan
        terraform apply tfplan
        
        # Ansible deployment
        cd ../ansible
        ansible-playbook -i inventory.yml main.yml --limit development
        ansible-playbook -i inventory.yml k8s-setup.yml --limit development
        ansible-playbook -i inventory.yml app-deploy.yml --limit development

  # Deploy to Staging
  deploy-staging:
    runs-on: ubuntu-latest
    needs: [test-and-build, security-scan, infrastructure-test]
    if: github.ref == 'refs/heads/main'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-west-2
    
    - name: Login to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Build and push Docker images
      run: |
        docker build -f dockerfiles/product.dockerfile -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/product-service:staging-${{ github.sha }} .
        docker build -f dockerfiles/basket.dockerfile -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/basket-service:staging-${{ github.sha }} .
        docker build -f dockerfiles/payment.dockerfile -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/payment-service:staging-${{ github.sha }} .
        docker build -f dockerfiles/gateway.dockerfile -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/gateway:staging-${{ github.sha }} .
        
        docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/product-service:staging-${{ github.sha }}
        docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/basket-service:staging-${{ github.sha }}
        docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/payment-service:staging-${{ github.sha }}
        docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/gateway:staging-${{ github.sha }}
    
    - name: Deploy to Staging
      run: |
        # Terraform apply for staging environment
        cd terraform
        terraform init
        terraform plan -var-file="terraform.tfvars.staging" -out=tfplan
        terraform apply tfplan
        
        # Ansible deployment
        cd ../ansible
        ansible-playbook -i inventory.yml main.yml --limit staging
        ansible-playbook -i inventory.yml k8s-setup.yml --limit staging
        ansible-playbook -i inventory.yml app-deploy.yml --limit staging

  # Deploy to Production
  deploy-production:
    runs-on: ubuntu-latest
    needs: [test-and-build, security-scan, infrastructure-test]
    if: github.event_name == 'release'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-west-2
    
    - name: Login to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Build and push Docker images
      run: |
        docker build -f dockerfiles/product.dockerfile -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/product-service:${{ github.event.release.tag_name }} .
        docker build -f dockerfiles/basket.dockerfile -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/basket-service:${{ github.event.release.tag_name }} .
        docker build -f dockerfiles/payment.dockerfile -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/payment-service:${{ github.event.release.tag_name }} .
        docker build -f dockerfiles/gateway.dockerfile -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/gateway:${{ github.event.release.tag_name }} .
        
        docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/product-service:${{ github.event.release.tag_name }}
        docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/basket-service:${{ github.event.release.tag_name }}
        docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/payment-service:${{ github.event.release.tag_name }}
        docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/gateway:${{ github.event.release.tag_name }}
    
    - name: Deploy to Production
      run: |
        # Terraform apply for production environment
        cd terraform
        terraform init
        terraform plan -var-file="terraform.tfvars.prod" -out=tfplan
        terraform apply tfplan
        
        # Ansible deployment
        cd ../ansible
        ansible-playbook -i inventory.yml main.yml --limit production
        ansible-playbook -i inventory.yml k8s-setup.yml --limit production
        ansible-playbook -i inventory.yml app-deploy.yml --limit production

  # Post-deployment Tests
  post-deployment-tests:
    runs-on: ubuntu-latest
    needs: [deploy-dev, deploy-staging]
    if: always()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-west-2
    
    - name: Install kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'
    
    - name: Configure kubectl
      run: |
        aws eks update-kubeconfig --region us-west-2 --name obs-tools-usage-dev-eks
        aws eks update-kubeconfig --region us-west-2 --name obs-tools-usage-staging-eks
    
    - name: Run health checks
      run: |
        # Development health checks
        kubectl get pods -n obs-tools-usage-dev
        kubectl get services -n obs-tools-usage-dev
        
        # Staging health checks
        kubectl get pods -n obs-tools-usage-staging
        kubectl get services -n obs-tools-usage-staging
    
    - name: Run integration tests
      run: |
        # API endpoint tests
        curl -f http://dev.obstools.local/health || echo "Dev health check failed"
        curl -f http://staging.obstools.local/health || echo "Staging health check failed"
    
    - name: Performance tests
      run: |
        # Load testing with k6
        echo "Running performance tests..."
        # Add k6 performance tests here

  # Cleanup
  cleanup:
    runs-on: ubuntu-latest
    needs: [post-deployment-tests]
    if: always()
    
    steps:
    - name: Cleanup old images
      run: |
        echo "Cleaning up old Docker images..."
        # Add cleanup logic here
    
    - name: Notify deployment status
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
      if: always()
