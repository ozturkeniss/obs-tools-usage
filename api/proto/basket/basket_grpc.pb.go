// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: api/proto/basket/basket.proto

package basket

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	BasketService_GetBasket_FullMethodName    = "/basket.BasketService/GetBasket"
	BasketService_CreateBasket_FullMethodName = "/basket.BasketService/CreateBasket"
	BasketService_DeleteBasket_FullMethodName = "/basket.BasketService/DeleteBasket"
	BasketService_AddItem_FullMethodName      = "/basket.BasketService/AddItem"
	BasketService_UpdateItem_FullMethodName   = "/basket.BasketService/UpdateItem"
	BasketService_RemoveItem_FullMethodName   = "/basket.BasketService/RemoveItem"
	BasketService_ClearBasket_FullMethodName  = "/basket.BasketService/ClearBasket"
	BasketService_HealthCheck_FullMethodName  = "/basket.BasketService/HealthCheck"
)

// BasketServiceClient is the client API for BasketService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BasketServiceClient interface {
	// Basket operations
	GetBasket(ctx context.Context, in *GetBasketRequest, opts ...grpc.CallOption) (*GetBasketResponse, error)
	CreateBasket(ctx context.Context, in *CreateBasketRequest, opts ...grpc.CallOption) (*CreateBasketResponse, error)
	DeleteBasket(ctx context.Context, in *DeleteBasketRequest, opts ...grpc.CallOption) (*DeleteBasketResponse, error)
	// Item operations
	AddItem(ctx context.Context, in *AddItemRequest, opts ...grpc.CallOption) (*AddItemResponse, error)
	UpdateItem(ctx context.Context, in *UpdateItemRequest, opts ...grpc.CallOption) (*UpdateItemResponse, error)
	RemoveItem(ctx context.Context, in *RemoveItemRequest, opts ...grpc.CallOption) (*RemoveItemResponse, error)
	ClearBasket(ctx context.Context, in *ClearBasketRequest, opts ...grpc.CallOption) (*ClearBasketResponse, error)
	// Health check
	HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error)
}

type basketServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBasketServiceClient(cc grpc.ClientConnInterface) BasketServiceClient {
	return &basketServiceClient{cc}
}

func (c *basketServiceClient) GetBasket(ctx context.Context, in *GetBasketRequest, opts ...grpc.CallOption) (*GetBasketResponse, error) {
	out := new(GetBasketResponse)
	err := c.cc.Invoke(ctx, BasketService_GetBasket_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *basketServiceClient) CreateBasket(ctx context.Context, in *CreateBasketRequest, opts ...grpc.CallOption) (*CreateBasketResponse, error) {
	out := new(CreateBasketResponse)
	err := c.cc.Invoke(ctx, BasketService_CreateBasket_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *basketServiceClient) DeleteBasket(ctx context.Context, in *DeleteBasketRequest, opts ...grpc.CallOption) (*DeleteBasketResponse, error) {
	out := new(DeleteBasketResponse)
	err := c.cc.Invoke(ctx, BasketService_DeleteBasket_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *basketServiceClient) AddItem(ctx context.Context, in *AddItemRequest, opts ...grpc.CallOption) (*AddItemResponse, error) {
	out := new(AddItemResponse)
	err := c.cc.Invoke(ctx, BasketService_AddItem_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *basketServiceClient) UpdateItem(ctx context.Context, in *UpdateItemRequest, opts ...grpc.CallOption) (*UpdateItemResponse, error) {
	out := new(UpdateItemResponse)
	err := c.cc.Invoke(ctx, BasketService_UpdateItem_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *basketServiceClient) RemoveItem(ctx context.Context, in *RemoveItemRequest, opts ...grpc.CallOption) (*RemoveItemResponse, error) {
	out := new(RemoveItemResponse)
	err := c.cc.Invoke(ctx, BasketService_RemoveItem_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *basketServiceClient) ClearBasket(ctx context.Context, in *ClearBasketRequest, opts ...grpc.CallOption) (*ClearBasketResponse, error) {
	out := new(ClearBasketResponse)
	err := c.cc.Invoke(ctx, BasketService_ClearBasket_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *basketServiceClient) HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	out := new(HealthCheckResponse)
	err := c.cc.Invoke(ctx, BasketService_HealthCheck_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BasketServiceServer is the server API for BasketService service.
// All implementations must embed UnimplementedBasketServiceServer
// for forward compatibility
type BasketServiceServer interface {
	// Basket operations
	GetBasket(context.Context, *GetBasketRequest) (*GetBasketResponse, error)
	CreateBasket(context.Context, *CreateBasketRequest) (*CreateBasketResponse, error)
	DeleteBasket(context.Context, *DeleteBasketRequest) (*DeleteBasketResponse, error)
	// Item operations
	AddItem(context.Context, *AddItemRequest) (*AddItemResponse, error)
	UpdateItem(context.Context, *UpdateItemRequest) (*UpdateItemResponse, error)
	RemoveItem(context.Context, *RemoveItemRequest) (*RemoveItemResponse, error)
	ClearBasket(context.Context, *ClearBasketRequest) (*ClearBasketResponse, error)
	// Health check
	HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error)
	mustEmbedUnimplementedBasketServiceServer()
}

// UnimplementedBasketServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBasketServiceServer struct {
}

func (UnimplementedBasketServiceServer) GetBasket(context.Context, *GetBasketRequest) (*GetBasketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBasket not implemented")
}
func (UnimplementedBasketServiceServer) CreateBasket(context.Context, *CreateBasketRequest) (*CreateBasketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBasket not implemented")
}
func (UnimplementedBasketServiceServer) DeleteBasket(context.Context, *DeleteBasketRequest) (*DeleteBasketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBasket not implemented")
}
func (UnimplementedBasketServiceServer) AddItem(context.Context, *AddItemRequest) (*AddItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddItem not implemented")
}
func (UnimplementedBasketServiceServer) UpdateItem(context.Context, *UpdateItemRequest) (*UpdateItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateItem not implemented")
}
func (UnimplementedBasketServiceServer) RemoveItem(context.Context, *RemoveItemRequest) (*RemoveItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveItem not implemented")
}
func (UnimplementedBasketServiceServer) ClearBasket(context.Context, *ClearBasketRequest) (*ClearBasketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClearBasket not implemented")
}
func (UnimplementedBasketServiceServer) HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedBasketServiceServer) mustEmbedUnimplementedBasketServiceServer() {}

// UnsafeBasketServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BasketServiceServer will
// result in compilation errors.
type UnsafeBasketServiceServer interface {
	mustEmbedUnimplementedBasketServiceServer()
}

func RegisterBasketServiceServer(s grpc.ServiceRegistrar, srv BasketServiceServer) {
	s.RegisterService(&BasketService_ServiceDesc, srv)
}

func _BasketService_GetBasket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBasketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BasketServiceServer).GetBasket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BasketService_GetBasket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BasketServiceServer).GetBasket(ctx, req.(*GetBasketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BasketService_CreateBasket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBasketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BasketServiceServer).CreateBasket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BasketService_CreateBasket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BasketServiceServer).CreateBasket(ctx, req.(*CreateBasketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BasketService_DeleteBasket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBasketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BasketServiceServer).DeleteBasket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BasketService_DeleteBasket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BasketServiceServer).DeleteBasket(ctx, req.(*DeleteBasketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BasketService_AddItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BasketServiceServer).AddItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BasketService_AddItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BasketServiceServer).AddItem(ctx, req.(*AddItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BasketService_UpdateItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BasketServiceServer).UpdateItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BasketService_UpdateItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BasketServiceServer).UpdateItem(ctx, req.(*UpdateItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BasketService_RemoveItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BasketServiceServer).RemoveItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BasketService_RemoveItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BasketServiceServer).RemoveItem(ctx, req.(*RemoveItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BasketService_ClearBasket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClearBasketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BasketServiceServer).ClearBasket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BasketService_ClearBasket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BasketServiceServer).ClearBasket(ctx, req.(*ClearBasketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BasketService_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BasketServiceServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BasketService_HealthCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BasketServiceServer).HealthCheck(ctx, req.(*HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BasketService_ServiceDesc is the grpc.ServiceDesc for BasketService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BasketService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "basket.BasketService",
	HandlerType: (*BasketServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBasket",
			Handler:    _BasketService_GetBasket_Handler,
		},
		{
			MethodName: "CreateBasket",
			Handler:    _BasketService_CreateBasket_Handler,
		},
		{
			MethodName: "DeleteBasket",
			Handler:    _BasketService_DeleteBasket_Handler,
		},
		{
			MethodName: "AddItem",
			Handler:    _BasketService_AddItem_Handler,
		},
		{
			MethodName: "UpdateItem",
			Handler:    _BasketService_UpdateItem_Handler,
		},
		{
			MethodName: "RemoveItem",
			Handler:    _BasketService_RemoveItem_Handler,
		},
		{
			MethodName: "ClearBasket",
			Handler:    _BasketService_ClearBasket_Handler,
		},
		{
			MethodName: "HealthCheck",
			Handler:    _BasketService_HealthCheck_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/proto/basket/basket.proto",
}
